// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stock stock
//
// swagger:model Stock
type Stock struct {

	// cost
	Cost float32 `json:"cost,omitempty"`

	// ticker
	ID string `json:"id,omitempty"`

	// lots
	Lots int64 `json:"lots,omitempty"`

	// name of stock
	Name string `json:"name,omitempty"`

	// type
	// Enum: [bond stock fond]
	Type string `json:"type,omitempty"`
}

// Validate validates this stock
func (m *Stock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stockTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bond","stock","fond"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stockTypeTypePropEnum = append(stockTypeTypePropEnum, v)
	}
}

const (

	// StockTypeBond captures enum value "bond"
	StockTypeBond string = "bond"

	// StockTypeStock captures enum value "stock"
	StockTypeStock string = "stock"

	// StockTypeFond captures enum value "fond"
	StockTypeFond string = "fond"
)

// prop value enum
func (m *Stock) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stockTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stock) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock based on context it is used
func (m *Stock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Stock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stock) UnmarshalBinary(b []byte) error {
	var res Stock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
