// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a fun Stonks service. You can find out more about us at [https://github.com/veremchukvv/stonks-test](https://github.com/veremchukvv/stonks-test).",
    "title": "Stonks",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/mit-license.php"
    },
    "version": "1.0.0"
  },
  "basePath": "/",
  "paths": {
    "/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profile"
        ],
        "summary": "Log user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "OAuth general error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "profile"
        ],
        "summary": "Log out current user",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/portfolios": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "portfolios"
        ],
        "summary": "Update an existing portfolio",
        "operationId": "updatePortfolio",
        "parameters": [
          {
            "description": "Update portfolio object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Portfolio not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "portfolios"
        ],
        "summary": "Create new portfolio",
        "operationId": "addNewPortfolio",
        "parameters": [
          {
            "description": "New portfolio object that needs to be added to profile",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/portfolios/{portfolioId}": {
      "get": {
        "description": "Returns a single portfolio",
        "produces": [
          "application/json"
        ],
        "tags": [
          "portfolios"
        ],
        "summary": "Find portfolio by ID",
        "operationId": "getPortfolioById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of portfolio to return",
            "name": "portfolioId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Portfolio not found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "portfolios"
        ],
        "summary": "Delete a portfolio",
        "operationId": "deletePortfolio",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Portfolio id to delete",
            "name": "portfolioId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Portfolio not found"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "profile"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profile"
        ],
        "summary": "Update profile",
        "operationId": "updateProfile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Profile update general error"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profile"
        ],
        "summary": "Create new profile",
        "operationId": "createProfile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/stocks": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "stocks"
        ],
        "summary": "Get information sbout stock",
        "operationId": "getStocks",
        "parameters": [
          {
            "description": "Stocks to search",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stock"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Stocks not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "post": {
        "tags": [
          "stocks"
        ],
        "summary": "Buy stock",
        "responses": {
          "400": {
            "description": "General error"
          },
          "404": {
            "description": "Stocks not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "CreateProfile": {
      "type": "object",
      "properties": {
        "JWT": {
          "type": "string"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "JWT": {
          "type": "string"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "JWT": {
          "type": "string"
        }
      }
    },
    "Portfolio": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "stocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stock"
          }
        }
      }
    },
    "Stock": {
      "type": "object",
      "properties": {
        "cost": {
          "type": "number",
          "format": "float"
        },
        "id": {
          "description": "ticker",
          "type": "string"
        },
        "lots": {
          "type": "number",
          "format": "int64"
        },
        "name": {
          "description": "name of stock",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "bond",
            "stock",
            "fond"
          ]
        }
      }
    },
    "UpdateProfile": {
      "type": "object",
      "properties": {
        "JWT": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userStatus": {
          "description": "User Status",
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Operations about user",
      "name": "profile"
    },
    {
      "description": "Operations about portfolio",
      "name": "portfolios"
    },
    {
      "description": "Operations about stocks",
      "name": "stocks"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a fun Stonks service. You can find out more about us at [https://github.com/veremchukvv/stonks-test](https://github.com/veremchukvv/stonks-test).",
    "title": "Stonks",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/mit-license.php"
    },
    "version": "1.0.0"
  },
  "basePath": "/",
  "paths": {
    "/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profile"
        ],
        "summary": "Log user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "OAuth general error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "profile"
        ],
        "summary": "Log out current user",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/portfolios": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "portfolios"
        ],
        "summary": "Update an existing portfolio",
        "operationId": "updatePortfolio",
        "parameters": [
          {
            "description": "Update portfolio object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Portfolio not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "portfolios"
        ],
        "summary": "Create new portfolio",
        "operationId": "addNewPortfolio",
        "parameters": [
          {
            "description": "New portfolio object that needs to be added to profile",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/portfolios/{portfolioId}": {
      "get": {
        "description": "Returns a single portfolio",
        "produces": [
          "application/json"
        ],
        "tags": [
          "portfolios"
        ],
        "summary": "Find portfolio by ID",
        "operationId": "getPortfolioById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of portfolio to return",
            "name": "portfolioId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Portfolio not found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "portfolios"
        ],
        "summary": "Delete a portfolio",
        "operationId": "deletePortfolio",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Portfolio id to delete",
            "name": "portfolioId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Portfolio not found"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "profile"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profile"
        ],
        "summary": "Update profile",
        "operationId": "updateProfile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Profile update general error"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profile"
        ],
        "summary": "Create new profile",
        "operationId": "createProfile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/stocks": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "stocks"
        ],
        "summary": "Get information sbout stock",
        "operationId": "getStocks",
        "parameters": [
          {
            "description": "Stocks to search",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stock"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Stocks not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "post": {
        "tags": [
          "stocks"
        ],
        "summary": "Buy stock",
        "responses": {
          "400": {
            "description": "General error"
          },
          "404": {
            "description": "Stocks not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "CreateProfile": {
      "type": "object",
      "properties": {
        "JWT": {
          "type": "string"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "JWT": {
          "type": "string"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "JWT": {
          "type": "string"
        }
      }
    },
    "Portfolio": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "stocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stock"
          }
        }
      }
    },
    "Stock": {
      "type": "object",
      "properties": {
        "cost": {
          "type": "number",
          "format": "float"
        },
        "id": {
          "description": "ticker",
          "type": "string"
        },
        "lots": {
          "type": "number",
          "format": "int64"
        },
        "name": {
          "description": "name of stock",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "bond",
            "stock",
            "fond"
          ]
        }
      }
    },
    "UpdateProfile": {
      "type": "object",
      "properties": {
        "JWT": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userStatus": {
          "description": "User Status",
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Operations about user",
      "name": "profile"
    },
    {
      "description": "Operations about portfolio",
      "name": "portfolios"
    },
    {
      "description": "Operations about stocks",
      "name": "stocks"
    }
  ]
}`))
}
